(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>i});var a=e(537),o=e.n(a),r=e(645),s=e.n(r)()(o());s.push([t.id,"*{\n    padding: 0;\n    margin: 0;\n    --primary-color: #94a3b8;\n    --secondary-color: #cbd5e1;\n    --accent-color: #64748b;\n    --background-color: #f1f5f9;\n    --footer-color: #334155;\n    --confirm-button: #a7f3d0;\n    --cancel-button: #fecaca;\n    --confirm-button-hover: #047857;\n    --confirm-button-active: #065f46;\n    --cancel-button-active: #f87171;\n}\n\nbody{\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.layout{\n    flex: 1;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n}\n\n.container{\n    padding: 20px;\n}\n\nheader{\n\n    grid-column: 1;\n    background-color: var(--primary-color);\n    width: 100%;\n    /* min-height: 100vh; */\n    display: flex;\n    flex-direction: column; \n}\n\n.logo{\n    font-size: 40px;\n    font-weight: bold;\n    text-align: center;\n    padding-bottom: 20px;\n}\n\nmain{\n    grid-column: 2;\n    background-color: var(--background-color);\n    width: 100%;\n}\n\n\n.project-list{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project-list .project-item{\n    padding: 5px;\n    border: none;\n    border-radius: 8px;\n    background-color: var(--secondary-color);\n}\n\n.project-list .project-item:hover{\n    padding: 5px;\n    border: none;\n    background-color: var(--accent-color);\n}\n\n.project-list .add-project-button{\n    background-color: var(--confirm-button);\n}\n\n.project-list .add-project-button:hover{\n    background-color: var(--confirm-button-hover);\n}\n\n.project-list .add-project-button:active{\n    background-color: var(--confirm-button-active);\n}\n\n.content{\n    padding: 0 150px 0 150px;\n}\n\n.content-title{\n    font-size: 30px;\n    padding: 10px 0 10px 0;\n}\n\n.task-items-list{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.task-item{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.task-item .button-name-group{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.task-item, .task-item-prompt, .task-item-input{\n    display: flex;\n    background-color: var(--secondary-color);\n    padding: 7.5px 5px 7.5px 5px;\n    align-items: center;\n    border-radius: 8px;\n}\n\n.task-item-prompt.active{\n    display: none;\n}\n\n.task-item .completed-button, .task-item-prompt .task-button{\n    margin-right: 20px;\n    padding: 5px;\n    border: none;\n    background: none;\n    border-radius: 25px;\n}\n\n.task-item .completed-button:hover, .task-item-prompt .task-button:hover{\n    background-color: var(--accent-color);\n}\n\n.task-item-input{\n    display: none;\n}\n\n.task-item-input.active{\n    display: flex;\n    flex-direction: column;\n}\n\n.task-item-input .add-task-name{\n    width: 50%;\n    height: 100%;\n    padding: 7.5px 5px 7.5px 5px;\n    border-radius: 8px;\n    border: none;\n}\n\n.add-task-name:focus,.add-task-priority:focus,.add-task-date:focus,.add-task-submit:focus, .add-task-cancel:focus{\n    outline: none;\n}\n\n.task-item-input .add-task-priority{\n    width: 20%;\n    border: none;\n    border-radius: 8px;\n}\n\n.task-item-input .button-container{\n    padding: 5px 0px 0px 0px;\n    display: flex;\n    gap: 10px;\n    width: 100%;\n}\n\n.task-item-input .data-group{\n    display: flex;\n    gap: 10px;\n}\n\n.add-task-submit, .add-task-cancel{\n    font-size: 17px;\n    padding: 5px 15px 5px 15px;\n    border: none;\n    border-radius: 8px;\n    flex-grow: 1;\n}\n\n.add-task-submit{\n    background-color: var(--confirm-button);\n}\n\n.add-task-cancel{\n    background-color: var(--cancel-button);\n}\n\n.add-task-submit:active{\n    background-color: var(--confirm-button-active);\n}\n\n\n.add-task-cancel:active{\n    background-color: var(--cancel-button-active);\n}\n\nfooter{\n    background-color: var(--footer-color);\n    padding: 10px 0 10px 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 20px;\n    width: 100%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,wBAAwB;IACxB,0BAA0B;IAC1B,uBAAuB;IACvB,2BAA2B;IAC3B,uBAAuB;IACvB,yBAAyB;IACzB,wBAAwB;IACxB,+BAA+B;IAC/B,gCAAgC;IAChC,+BAA+B;AACnC;;AAEA;IACI,iBAAiB;IACjB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,OAAO;IACP,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,cAAc;IACd,sCAAsC;IACtC,WAAW;IACX,uBAAuB;IACvB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,cAAc;IACd,yCAAyC;IACzC,WAAW;AACf;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,wCAAwC;AAC5C;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,qCAAqC;AACzC;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,6CAA6C;AACjD;;AAEA;IACI,8CAA8C;AAClD;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,eAAe;IACf,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;AAClC;;AAEA;IACI,aAAa;IACb,wCAAwC;IACxC,4BAA4B;IAC5B,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,qCAAqC;AACzC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,4BAA4B;IAC5B,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,SAAS;IACT,WAAW;AACf;;AAEA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,eAAe;IACf,0BAA0B;IAC1B,YAAY;IACZ,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,uCAAuC;AAC3C;;AAEA;IACI,sCAAsC;AAC1C;;AAEA;IACI,8CAA8C;AAClD;;;AAGA;IACI,6CAA6C;AACjD;;AAEA;IACI,qCAAqC;IACrC,sBAAsB;IACtB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,SAAS;IACT,WAAW;AACf",sourcesContent:["*{\n    padding: 0;\n    margin: 0;\n    --primary-color: #94a3b8;\n    --secondary-color: #cbd5e1;\n    --accent-color: #64748b;\n    --background-color: #f1f5f9;\n    --footer-color: #334155;\n    --confirm-button: #a7f3d0;\n    --cancel-button: #fecaca;\n    --confirm-button-hover: #047857;\n    --confirm-button-active: #065f46;\n    --cancel-button-active: #f87171;\n}\n\nbody{\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.layout{\n    flex: 1;\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n}\n\n.container{\n    padding: 20px;\n}\n\nheader{\n\n    grid-column: 1;\n    background-color: var(--primary-color);\n    width: 100%;\n    /* min-height: 100vh; */\n    display: flex;\n    flex-direction: column; \n}\n\n.logo{\n    font-size: 40px;\n    font-weight: bold;\n    text-align: center;\n    padding-bottom: 20px;\n}\n\nmain{\n    grid-column: 2;\n    background-color: var(--background-color);\n    width: 100%;\n}\n\n\n.project-list{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.project-list .project-item{\n    padding: 5px;\n    border: none;\n    border-radius: 8px;\n    background-color: var(--secondary-color);\n}\n\n.project-list .project-item:hover{\n    padding: 5px;\n    border: none;\n    background-color: var(--accent-color);\n}\n\n.project-list .add-project-button{\n    background-color: var(--confirm-button);\n}\n\n.project-list .add-project-button:hover{\n    background-color: var(--confirm-button-hover);\n}\n\n.project-list .add-project-button:active{\n    background-color: var(--confirm-button-active);\n}\n\n.content{\n    padding: 0 150px 0 150px;\n}\n\n.content-title{\n    font-size: 30px;\n    padding: 10px 0 10px 0;\n}\n\n.task-items-list{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.task-item{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.task-item .button-name-group{\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.task-item, .task-item-prompt, .task-item-input{\n    display: flex;\n    background-color: var(--secondary-color);\n    padding: 7.5px 5px 7.5px 5px;\n    align-items: center;\n    border-radius: 8px;\n}\n\n.task-item-prompt.active{\n    display: none;\n}\n\n.task-item .completed-button, .task-item-prompt .task-button{\n    margin-right: 20px;\n    padding: 5px;\n    border: none;\n    background: none;\n    border-radius: 25px;\n}\n\n.task-item .completed-button:hover, .task-item-prompt .task-button:hover{\n    background-color: var(--accent-color);\n}\n\n.task-item-input{\n    display: none;\n}\n\n.task-item-input.active{\n    display: flex;\n    flex-direction: column;\n}\n\n.task-item-input .add-task-name{\n    width: 50%;\n    height: 100%;\n    padding: 7.5px 5px 7.5px 5px;\n    border-radius: 8px;\n    border: none;\n}\n\n.add-task-name:focus,.add-task-priority:focus,.add-task-date:focus,.add-task-submit:focus, .add-task-cancel:focus{\n    outline: none;\n}\n\n.task-item-input .add-task-priority{\n    width: 20%;\n    border: none;\n    border-radius: 8px;\n}\n\n.task-item-input .button-container{\n    padding: 5px 0px 0px 0px;\n    display: flex;\n    gap: 10px;\n    width: 100%;\n}\n\n.task-item-input .data-group{\n    display: flex;\n    gap: 10px;\n}\n\n.add-task-submit, .add-task-cancel{\n    font-size: 17px;\n    padding: 5px 15px 5px 15px;\n    border: none;\n    border-radius: 8px;\n    flex-grow: 1;\n}\n\n.add-task-submit{\n    background-color: var(--confirm-button);\n}\n\n.add-task-cancel{\n    background-color: var(--cancel-button);\n}\n\n.add-task-submit:active{\n    background-color: var(--confirm-button-active);\n}\n\n\n.add-task-cancel:active{\n    background-color: var(--cancel-button-active);\n}\n\nfooter{\n    background-color: var(--footer-color);\n    padding: 10px 0 10px 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 20px;\n    width: 100%;\n}"],sourceRoot:""}]);const i=s},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",a=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),a&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),a&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,a,o,r){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(a)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var d=0;d<t.length;d++){var A=[].concat(t[d]);a&&s[A[0]]||(void 0!==r&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=r),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(o," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,a=0;a<n.length;a++)if(n[a].identifier===t){e=a;break}return e}function a(t,a){for(var r={},s=[],i=0;i<t.length;i++){var c=t[i],d=a.base?c[0]+a.base:c[0],A=r[d]||0,l="".concat(d," ").concat(A);r[d]=A+1;var u=e(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,a);a.byIndex=i,n.splice(i,0,{identifier:l,updater:m,references:1})}s.push(l)}return s}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var r=a(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<r.length;s++){var i=e(r[s]);n[i].references--}for(var c=a(t,o),d=0;d<r.length;d++){var A=e(r[d]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}r=c}}},569:t=>{var n={};t.exports=function(t,e){var a=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,o&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(a,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(a){var o=n[a];if(void 0!==o)return o.exports;var r=n[a]={id:a,exports:{}};return t[a](r,r.exports,e),r.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),a=e(795),o=e.n(a),r=e(569),s=e.n(r),i=e(565),c=e.n(i),d=e(216),A=e.n(d),l=e(589),u=e.n(l),p=e(426),m={};function g(t){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},g(t)}function f(t,n){if(n.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+n.length+" present")}function C(t){f(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===g(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function b(t){f(1,arguments);var n=C(t);return n.setHours(0,0,0,0),n}m.styleTagTransform=u(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var k={};function v(){return k}function h(t,n){var e,a,o,r,s,i,c,d;f(1,arguments);var A=v(),l=function(t){if(null===t||!0===t||!1===t)return NaN;var n=Number(t);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}(null!==(e=null!==(a=null!==(o=null!==(r=null==n?void 0:n.weekStartsOn)&&void 0!==r?r:null==n||null===(s=n.locale)||void 0===s||null===(i=s.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==o?o:A.weekStartsOn)&&void 0!==a?a:null===(c=A.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==e?e:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=C(t),p=u.getDay(),m=(p<l?7:0)+p-l;return u.setDate(u.getDate()-m),u.setHours(0,0,0,0),u}class x{constructor(t){this.name=t,this.tasks=[]}setName(t){this.name=t}getName(){return this.name}setTasks(t){this.tasks=t}getTasks(){return this.tasks}addTask(t){this.tasks.find((n=>n.getName()===t.name))||this.tasks.push(t)}removeTask(t){this.tasks=this.tasks.filter((n=>n.title!==t))}getTask(t){return this.tasks.find((n=>n.getName()===t))}getTasksToday(){return this.tasks.filter((t=>{const n=t.getDate();if(null!=n)return function(t){return f(1,arguments),function(t,n){f(2,arguments);var e=b(t),a=b(n);return e.getTime()===a.getTime()}(t,Date.now())}(C(n))}))}getTasksThisWeek(){return this.tasks.filter((t=>{const n=t.getDate();if(null!=n)return function(t,n){return f(1,arguments),function(t,n,e){f(2,arguments);var a=h(t,e),o=h(n,e);return a.getTime()===o.getTime()}(t,Date.now(),n)}(C(n))}))}}class I{constructor(t,n,e=null,a="low"){this.title=t,this.description=n,this.dueDate=e instanceof Date?e:null,this.priority=a}setName(t){this.title=t}getName(){return this.title}setDate(t){this.dueDate=t}getDate(){return this.dueDate}getDateFormatted(){const t=this.dueDate.getDate(),n=this.dueDate.getMonth()+1,e=this.dueDate.getFullYear();return`${t.toString().padStart(2,"0")}/${n.toString().padStart(2,"0")}/${e}`}}class B{constructor(){this.projects=[],this.projects.push(new x("Inbox")),this.projects.push(new x("Today")),this.projects.push(new x("This week"))}getProject(t){return this.projects.find((n=>n.getName()===t))}setProjects(t){this.projects=t}getProjects(){return this.projects}addProject(t){this.projects.find((n=>n.getName()===t.getName()))||this.projects.push(t)}deleteProject(t){this.projects=this.projects.filter((n=>n!==t))}}class y{static saveTodolist(t){localStorage.setItem("todoList",JSON.stringify(t))}static getTodoList(){const t=Object.assign(new B,JSON.parse(localStorage.getItem("todoList")));return t.setProjects(t.getProjects().map((t=>Object.assign(new x,t)))),t.getProjects().forEach((t=>t.setTasks(t.getTasks().map((t=>Object.assign(new I,t)))))),t.getProjects().forEach((t=>t.getTasks().forEach((t=>{null!=t.getDate()&&t.setDate(new Date(t.getDate()))})))),t}static addProject(t){const n=y.getTodoList();n.addProject(t),y.saveTodolist(n)}static removeProject(t){const n=y.getTodoList();n.removeProject(t),y.saveTodolist(n)}static addTask(t,n){const e=y.getTodoList();e.getProject(t).addTask(n),y.saveTodolist(e)}static removeTask(t,n){const e=y.getTodoList();e.getProject(t).removeTask(n),y.saveTodolist(e)}static setDueDate(t,n,e){const a=y.getTodoList();a.getProject(t).getTask(n).setDate(e),y.saveTodolist(a)}}let j=new B,E=j.getProject("Inbox");const w=()=>{const t=document.createElement("div"),n=document.createElement("div");n.classList.add("task-item-prompt");const e=document.createElement("div");e.classList.add("task-item-input");const a=document.createElement("button");a.classList.add("task-button"),a.addEventListener("click",(()=>{n.classList.toggle("active"),e.innerHTML="",((t,n)=>{t.classList.toggle("active");const e=document.createElement("div");e.classList.add("data-group");const a=document.createElement("input");a.classList.add("add-task-name"),a.setAttribute("id","add-task-name"),a.setAttribute("type","text"),e.appendChild(a);const o=document.createElement("select");o.classList.add("add-task-priority"),o.setAttribute("id","add-task-priority"),o.setAttribute("type","select");const r=document.createElement("option");r.value="low",r.text="Low";const s=document.createElement("option");s.value="medium",s.text="Medium";const i=document.createElement("option");i.value="high",i.text="High",o.appendChild(r),o.appendChild(s),o.appendChild(i),e.appendChild(o);const c=document.createElement("div");c.classList.add("button-container");const d=document.createElement("input");d.classList.add("add-task-date"),d.setAttribute("type","date"),e.appendChild(d);const A=document.createElement("button");A.classList.add("add-task-submit"),A.setAttribute("id","add-task-submit"),A.textContent="Add",t.addEventListener("click",(e=>{if(e.target.classList.contains("add-task-submit")){const t=a.value;if(""===t)return;if(E.getTask(t))return;let n=d.value;n=n?new Date(d.valueAsDate):null;const e=new I(t,"Test Description",n,o.value);y.addTask(E.getName(),e),console.log("added task"),L()}else e.target.classList.contains("add-task-cancel")&&(t.classList.toggle("active"),n.classList.toggle("active"))}));const l=document.createElement("button");l.classList.add("add-task-cancel"),l.setAttribute("id","add-task-cancel"),l.textContent="Cancel",t.appendChild(e),c.appendChild(A),c.appendChild(l),t.appendChild(c)})(e,n)}));const o=document.createElement("i");o.classList.add("fa-solid","fa-plus"),o.style.color="#000000",a.appendChild(o),n.appendChild(a);const r=document.createElement("p");return r.classList.add("add-task-title"),r.textContent="Add Task",n.appendChild(r),t.appendChild(n),t.appendChild(e),t},T=t=>{const n=document.createElement("p");return n.textContent=t.getDateFormatted(),n},L=()=>{null!==localStorage.getItem("todoList")&&(console.log("retrieved list"),j=y.getTodoList()),(()=>{const t=document.getElementById("project-list");t.innerHTML="",console.log(j.projects),j.projects.forEach((n=>{const e=document.createElement("button");e.classList.add("project-item"),e.addEventListener("click",(()=>{E=n,L()}));const a=document.createElement("p");a.classList.add("project-title"),a.textContent=n.getName(),e.appendChild(a),t.appendChild(e)})),t.appendChild((()=>{const t=document.createElement("button");return t.classList.add("project-item","add-project-button"),t.textContent="Add new Project",t.addEventListener("click",(()=>{const t=prompt("Enter new Project name");y.addProject(new x(t)),L()})),t})())})(),(()=>{const t=j.getProject("Today"),n=j.getProject("This week");j.getProjects().forEach((e=>{const a=e.getTasksToday(),o=e.getTasksThisWeek();e.tasks.forEach((r=>{a.includes(r)&&o.includes(r)?a.forEach((n=>{y.removeTask(e.getName(),n.getName()),y.addTask(t.getName(),n)})):o.includes(r)&&o.forEach((t=>{y.removeTask(e.getName(),t.getName()),y.addTask(n.getName(),t)}))}))}))})();const t=document.getElementById("content");t.innerHTML="";const n=document.createElement("h2");return n.classList.add("content-title"),n.textContent=E.getName(),t.appendChild(n),t.appendChild((()=>{if(0===j.getProject(E.getName()).getTasks().length)return console.log("Returned empty"),w();{const t=document.createElement("div");return t.classList.add("task-items-list"),j.getProject(E.getName()).getTasks().forEach((n=>{const e=(t=>{const n=document.createElement("div");n.classList.add("task-item");const e=document.createElement("p");e.textContent=t.getName();const a=document.createElement("div");a.classList.add("button-name-group");const o=document.createElement("button");o.classList.add("completed-button"),o.setAttribute("id","completed-button");const r=document.createElement("i");if(r.classList.add("fa-regular","fa-circle-check"),r.style.color="#000000",o.addEventListener("click",(()=>{y.removeTask(E.getName(),t.getName()),L()})),o.appendChild(r),a.appendChild(o),a.appendChild(e),n.appendChild(a),null==t.getDate()){const e=document.createElement("input");e.setAttribute("type","date"),n.appendChild(e),e.addEventListener("blur",(()=>{t.setDate(new Date(e.valueAsDate)),y.setDueDate(E.getName(),t.getName(),t.getDate()),n.replaceChild(T(t),e),t.getDate(),L()}))}else n.appendChild(T(t));return n})(n);t.appendChild(e)})),t.appendChild(w()),t}})()),t};document.addEventListener("DOMContentLoaded",(()=>{L()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,